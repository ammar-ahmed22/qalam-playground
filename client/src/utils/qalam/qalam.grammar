@top Program { statement }

statement { FunctionCall | VariableDeclaration | FunctionDeclaration | ClassDeclaration | ReturnStmt | IfStmt | ElseStmt | ForStmt | WhileStmt | ExprStmt }

expression { LogicalExpr | FunctionCall }

LogicalExpr {
  OrExpr
}

OrExpr { AndExpr (Or AndExpr)* }

AndExpr { NotExpr (And NotExpr)* }

NotExpr { Not NotExpr | PrimaryExpr }

ExprStmt { expression ";" }

PrimaryExpr {
  "(" expression ")" |
  SuperReference |
  SelfReference |
  VariableReference |
  Number |
  Bool |
  Null |
  String
}

SuperReference { Super "." Name }

SelfReference { Self "." Name }

VariableDeclaration { Shai Name "=" expression ";" }

VariableReference { Name ("." Name)*? }

ClassDeclaration { Kitab Name (Ibn Name)? Block }

FunctionDeclaration { Amal Name "(" ParameterList ")" Block }

ForStmt { For "(" expression ";" expression ";" expression ")" Block }

WhileStmt { While "(" expression ")" Block }

FunctionCall { Name "(" ArgumentList ")" }

ReturnStmt { Return expression ";" }

IfStmt { If "(" expression ")" Block }

ElseStmt { Else Block }

ParameterList { Name ("," Name)* }

ArgumentList { expression ("," expression)* }

Block { "{" statement* "}" }

@tokens {
  Shai { "rakho" }
  Bool { "sach" | "jhoot" }
  Amal { "kaam" }
  If { "agar" }
  Else { "warna" }
  Null { "khali" }
  Return { "wapis" }
  Not { "nahi" }
  Or { "ya" }
  And { "aur" }
  For { "har" }
  While { "jabtak" }
  Self { "yeh" }
  Super { "asli"}
  Name { @asciiLetter (@asciiLetter | @digit | "_")* }
  Kitab { "jamat" }
  Ibn { "shamil" }
  Number { @digit+ }
  String { '"' (!["\\] | "\\" _)* '"' }
  whitespace { $[ \n\r\t] }
  Comment { "//" (![\n])* } 
  "{" "}" "[" "]" "(" ")"
  @precedence { Shai, Bool, Amal, Null, Return, If, Else, String, For, While, Ibn, Kitab, Self, Super, Not, Or, And, Name }
}

@skip { whitespace | Comment }
@detectDelim
